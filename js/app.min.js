/**
 * Приложение Snoopy Dogs
 * Оптимизированный и объединенный JavaScript
 */

(function() {
    'use strict';
    
    // DOM элементы
    const dom = {
        menuBtn: document.querySelector('.menu-btn'),
        menuOverlay: document.querySelector('.menu-overlay'),
        mainNav: document.querySelector('.main-nav'),
        tabBtns: document.querySelectorAll('.tab-btn'),
        tabContents: document.querySelectorAll('.tab-content'),
        filterBtns: document.querySelectorAll('.filter-btn'),
        portfolioItems: document.querySelectorAll('.portfolio-item'),
        contactForm: document.getElementById('contactForm'),
        formSuccess: document.getElementById('formSuccess'),
        mapContainer: document.getElementById('map')
    };
    
    // Инициализация приложения
    function init() {
        // Инициализация навигации
        initNavigation();
        
        // Инициализация табов (если есть)
        if (dom.tabBtns.length > 0) {
            initTabs();
        }
        
        // Инициализация фильтрации портфолио (если есть)
        if (dom.filterBtns.length > 0) {
            initPortfolioFilter();
        }
        
        // Инициализация формы контактов (если есть)
        if (dom.contactForm) {
            initContactForm();
        }
        
        // Инициализация карты (если есть)
        if (dom.mapContainer) {
            window.addEventListener('load', initMap);
        }
        
        // Инициализация анимаций скролла
        initAnimations();
    }
    
    // Навигация
    function initNavigation() {
        // Мобильное меню
        dom.menuBtn.addEventListener('click', toggleMenu);
        dom.menuOverlay.addEventListener('click', closeMenu);
        
        function toggleMenu() {
            dom.menuBtn.classList.toggle('active');
            dom.mainNav.classList.toggle('active');
            dom.menuOverlay.classList.toggle('active');
            document.body.classList.toggle('menu-open');
        }
        
        function closeMenu() {
            dom.menuBtn.classList.remove('active');
            dom.mainNav.classList.remove('active');
            dom.menuOverlay.classList.remove('active');
            document.body.classList.remove('menu-open');
        }
    }
    
    // Табы
    function initTabs() {
        dom.tabBtns.forEach(btn => {
            btn.addEventListener('click', function() {
                // Убираем активный класс со всех кнопок
                dom.tabBtns.forEach(b => b.classList.remove('active'));
                
                // Добавляем активный класс текущей кнопке
                this.classList.add('active');
                
                // Получаем ID таба
                const tabId = this.getAttribute('data-tab');
                
                // Скрываем все табы
                dom.tabContents.forEach(content => {
                    content.classList.remove('active');
                });
                
                // Показываем активный таб
                document.getElementById(tabId).classList.add('active');
            });
        });
    }
    
    // Фильтрация портфолио
    function initPortfolioFilter() {
        dom.filterBtns.forEach(btn => {
            btn.addEventListener('click', function() {
                // Убираем активный класс со всех кнопок
                dom.filterBtns.forEach(b => b.classList.remove('active'));
                
                // Добавляем активный класс текущей кнопке
                this.classList.add('active');
                
                // Получаем категорию фильтра
                const filter = this.getAttribute('data-filter');
                
                // Фильтруем элементы
                dom.portfolioItems.forEach(item => {
                    if (filter === 'all' || item.getAttribute('data-category').includes(filter)) {
                        item.style.display = 'block';
                    } else {
                        item.style.display = 'none';
                    }
                });
            });
        });
    }
    
    // Форма контактов
    function initContactForm() {
        // Проверяем наличие формы и блока успешной отправки
        if (!dom.contactForm || !dom.formSuccess) return;
        
        dom.contactForm.addEventListener('submit', function(e) {
            e.preventDefault();
            
            // Валидация формы
            if (validateForm(this)) {
                // Сбор данных формы
                const formData = new FormData(this);
                let formEntries = {};
                
                formData.forEach((value, key) => {
                    formEntries[key] = value;
                });
                
                // Показываем сообщение об успехе
                dom.formSuccess.classList.add('active');
                
                // В реальном проекте здесь будет отправка данных на сервер
                console.log('Форма отправлена:', formEntries);
                
                // Очищаем форму
                this.reset();
                
                // Через 5 секунд скрываем сообщение и показываем форму снова
                setTimeout(() => {
                    dom.formSuccess.classList.remove('active');
                }, 5000);
            }
        });
    }
    
    // Валидация формы
    function validateForm(form) {
        let isValid = true;
        const requiredFields = form.querySelectorAll('[required]');
        
        // Удаляем предыдущие сообщения об ошибках
        const errorMessages = form.querySelectorAll('.error-message');
        errorMessages.forEach(message => message.remove());
        
        // Проверяем обязательные поля
        requiredFields.forEach(field => {
            field.classList.remove('error');
            
            if (!field.value.trim()) {
                isValid = false;
                addError(field, 'Это поле обязательно для заполнения');
            }
        });
        
        // Проверка email, если есть
        const emailField = form.querySelector('input[type="email"]');
        if (emailField && emailField.value.trim()) {
            const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
            if (!emailRegex.test(emailField.value.trim())) {
                isValid = false;
                addError(emailField, 'Пожалуйста, введите корректный email');
            }
        }
        
        // Проверка телефона, если есть
        const phoneField = form.querySelector('input[type="tel"]');
        if (phoneField && phoneField.value.trim()) {
            const phoneRegex = /^[+]?[(]?[0-9]{3}[)]?[-\s.]?[0-9]{3}[-\s.]?[0-9]{4,6}$/;
            if (!phoneRegex.test(phoneField.value.trim())) {
                isValid = false;
                addError(phoneField, 'Пожалуйста, введите корректный номер телефона');
            }
        }
        
        return isValid;
        
        function addError(field, message) {
            field.classList.add('error');
            
            // Добавляем сообщение об ошибке
            const errorMessage = document.createElement('div');
            errorMessage.className = 'error-message';
            errorMessage.textContent = message;
            field.parentNode.appendChild(errorMessage);
        }
    }
    
    // Яндекс карта
    function initMap() {
        // Проверяем наличие карты на странице
        const mapElement = document.getElementById('map');
        if (!mapElement || !window.ymaps) return;
        
        ymaps.ready(function() {
            // Координаты салона (пример)
            const coordinates = [55.76, 37.64]; // Москва
            
            var myMap = new ymaps.Map('map', {
                center: coordinates,
                zoom: 15,
                controls: ['zoomControl', 'geolocationControl']
            });
            
            // Создаем метку
            var myPlacemark = new ymaps.Placemark(coordinates, {
                hintContent: 'Салон груминга "Snoopy Dogs"',
                balloonContent: '<div class="map-balloon"><strong>Snoopy Dogs</strong><br>ул. Пушистая, д. 15, г. Москва<br>Тел: +7 (999) 123-45-67</div>'
            }, {
                iconLayout: 'default#imageWithContent',
                iconImageHref: 'img/marker.png',
                iconImageSize: [40, 40],
                iconImageOffset: [-20, -40],
                iconContentOffset: [15, 15]
            });
            
            myMap.geoObjects.add(myPlacemark);
            
            // Отключаем прокрутку колесом мыши
            myMap.behaviors.disable('scrollZoom');
            
            // Подгоняем карту под размер контейнера
            myMap.container.fitToViewport();
        });
    }
    
    // Анимации при скролле
    function initAnimations() {
        // Поддержка как новых, так и старых классов для анимации
        const animateItems = document.querySelectorAll('.animate-item, .animate-on-scroll');
        
        if (animateItems.length === 0) return;
        
        // Опции для IntersectionObserver
        const options = {
            root: null,
            rootMargin: '0px',
            threshold: 0.1
        };
        
        // Функция обратного вызова для IntersectionObserver
        const callback = (entries, observer) => {
            entries.forEach(entry => {
                if (entry.isIntersecting) {
                    entry.target.classList.add('animated');
                    observer.unobserve(entry.target);
                }
            });
        };
        
        // Создаем экземпляр IntersectionObserver
        const observer = new IntersectionObserver(callback, options);
        
        // Наблюдаем за всеми элементами для анимации
        animateItems.forEach(item => {
            observer.observe(item);
        });
    }
    
    // Запуск приложения при загрузке DOM
    document.addEventListener('DOMContentLoaded', init);
})(); 